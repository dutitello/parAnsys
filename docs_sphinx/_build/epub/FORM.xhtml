<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>First Order Reliability Method (FORM)</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="first-order-reliability-method-form">
<span id="form"></span><h1>First Order Reliability Method (FORM)</h1>
<dl class="class">
<dt id="paransys.FORM">
<em class="property">class </em><code class="sig-prename descclassname">paransys.</code><code class="sig-name descname">FORM</code></dt>
<dd><p>This class applies the First Order Reliability Method (FORM) inside Python
using ParAnsys as a connection with ANSYS for evaluate FEM models.</p>
<p>It is possible to run simulations without using ANSYS, just
defining the limit state equation and all variables.</p>
<p>This code was made following the ideia of ANSYS being a tool for getting the
ultimate load of the structure. This works applying a displacement in the
loaded node, and then getting the biggest reaction force on that node,
following this way the limit state defined here is ‘R-S’, where R are the
values get from ANSYS and S the values generated in Python. It’s also
possible to work applying the true load on ANSYS, it’s just necessary to
formulate a valid limit state equation.</p>
<div class="line-block">
<div class="line"><br /></div>
<div class="line"><br /></div>
</div>
<p><strong>Class methods:</strong></p>
<dl class="method">
<dt id="paransys.FORM.ANSYS">
<code class="sig-name descname">ANSYS</code><span class="sig-paren">(</span><em class="sig-param">exec_loc=None</em>, <em class="sig-param">run_location='C:\\Programacao\\_MinhasBibliotecas\\paransys\\docs\\ansys_anl\\'</em>, <em class="sig-param">jobname='file'</em>, <em class="sig-param">nproc=2</em>, <em class="sig-param">override=False</em>, <em class="sig-param">cleardir=False</em>, <em class="sig-param">add_flags=''</em><span class="sig-paren">)</span></dt>
<dd><p>If ANSYS will be used it defines ANSYS properties, for initialize the
paransys.ANSYS class.</p>
<dl class="simple">
<dt>exec_loc<span class="classifier">str, obligatory</span></dt><dd><p>Location of ANSYS executable file.</p>
</dd>
<dt>run_location<span class="classifier">str, optional</span></dt><dd><p>ANSYS working directory. Recomended to be a separated directory.
Defaults to ansys_anl on current directory.</p>
</dd>
<dt>jobname<span class="classifier">str, optional</span></dt><dd><p>ANSYS jobname. Defaults to ‘file’.</p>
</dd>
<dt>nproc<span class="classifier">int, optional</span></dt><dd><p>Number of processors. Defaults to 2.</p>
</dd>
<dt>override<span class="classifier">bool, optional</span></dt><dd><p>Attempts to delete the .lock file at working directory.
It’s useful when ANSYS was interrupted.
Defaults to False</p>
</dd>
<dt>cleardir<span class="classifier">bool, optional</span></dt><dd><p>Delete all the files from ANSYS working directory when call the Run command.
Defaults to False</p>
</dd>
<dt>add_flags<span class="classifier">str, optional</span></dt><dd><p>Additional flags to be called with ANSYS.
If it’s an academic version use add_flags=’-aa_r’
Do not use ‘-b -i -o’
Flags can be found at <a class="reference external" href="https://www.sharcnet.ca/Software/Ansys/16.2.3/en-us/help/ans_ope/Hlp_G_OPE3_1.html">https://www.sharcnet.ca/Software/Ansys/16.2.3/en-us/help/ans_ope/Hlp_G_OPE3_1.html</a></p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.CreateVar">
<code class="sig-name descname">CreateVar</code><span class="sig-paren">(</span><em class="sig-param">name</em>, <em class="sig-param">distrib</em>, <em class="sig-param">mean</em>, <em class="sig-param">std=0</em>, <em class="sig-param">cv=None</em>, <em class="sig-param">par1=None</em>, <em class="sig-param">par2=None</em><span class="sig-paren">)</span></dt>
<dd><p>Create a Variable, random or not.</p>
<p>If it’s used on ANSYS it need to be told, so after this use:</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">form</span><span class="o">.</span><span class="n">SetANSYSVar</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</pre></div>
</div>
<dl>
<dt>name<span class="classifier">str, obligatory</span></dt><dd><p>Name of variable.</p>
</dd>
<dt>distrib<span class="classifier">str, obligatory</span></dt><dd><p>Probabilistic variable distribution type.</p>
<p>For all distributions Mean and Std are related to Normal distribution
(the code determines the parameters for the desired distribution).</p>
<p>Available types are:
* gaussian (or gauss, normal);
* lognormal (or log, logn, ln, lognorm);
* gumbel (or gumb, type1);
* constant (or const) - Constant value (doesn’t need std).</p>
</dd>
<dt>mean<span class="classifier">float, obligatory</span></dt><dd><p>Standard mean of variable values.</p>
</dd>
<dt>std<span class="classifier">float, optional</span></dt><dd><p>Standard deviation of variable. You must define it or cv for variables
that aren’t constant, if both (cv and std) declared std will be used.</p>
<p>For LogNormal variables it’s recommend to use CV!</p>
</dd>
<dt>cv<span class="classifier">float, optional</span></dt><dd><p>Coeficient of Variation of variable. You must define it or std for variables
that aren’t constant, if both (cv and std) declared std will be used.</p>
<p>For LogNormal variables it’s recommend to use CV!</p>
</dd>
<dt>par1 and par2<span class="classifier">float, optional</span></dt><dd><p>Parameters for future implementations.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.ExportDataCSV">
<code class="sig-name descname">ExportDataCSV</code><span class="sig-paren">(</span><em class="sig-param">filename</em>, <em class="sig-param">description=None</em><span class="sig-paren">)</span></dt>
<dd><p>Exports process data to a CSV file.</p>
<dl class="simple">
<dt>filename<span class="classifier">str, obligatory</span></dt><dd><p>Name of file that will receive the values, doesn’t need the
extension “.csv”, it will be placed automatically.</p>
</dd>
<dt>description<span class="classifier">str, optional</span></dt><dd><p>A string that will be write in the beggining of the file.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.Info">
<code class="sig-name descname">Info</code><span class="sig-paren">(</span><em class="sig-param">act=False</em><span class="sig-paren">)</span></dt>
<dd><p>Turn on/off the return of the commands to Python.</p>
<dl class="simple">
<dt>act<span class="classifier">bool, obligatory</span></dt><dd><p>True turn On and False turn Off the return of the commands to Python.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.Options">
<code class="sig-name descname">Options</code><span class="sig-paren">(</span><em class="sig-param">option</em>, <em class="sig-param">value=None</em><span class="sig-paren">)</span></dt>
<dd><p>Set extra options values.</p>
<dl class="simple">
<dt>option<span class="classifier">str, obligatory</span></dt><dd><p>Name of option, listed next.</p>
</dd>
<dt>value<span class="classifier">optional</span></dt><dd><p>Value to be set, type varies with option.
If not defined it will return current value.</p>
</dd>
</dl>
<p>** Valid options:**
For iHLRF method:</p>
<blockquote>
<div><ul>
<li><p>iHLRF_forced_lambdk : float
Forced value when line search doesnt found a valid <code class="docutils literal notranslate"><span class="pre">lambdak</span></code>.
Being <code class="docutils literal notranslate"><span class="pre">lambdak</span></code> the step size.</p>
<p>It could be set as <code class="docutils literal notranslate"><span class="pre">'auto'</span></code>, when it
is the complement of <code class="docutils literal notranslate"><span class="pre">|y*.gradG|/(|y*|.|gradG|)</span></code>.
Defaults to ‘auto’.</p>
</li>
<li><p>iHLRF_prod_ck : float
Scalar value that will be multiplied by calculated <code class="docutils literal notranslate"><span class="pre">ck</span></code> value. For a
fix <code class="docutils literal notranslate"><span class="pre">ck</span></code> value turn it to 0 and then use ‘iHLRF_add_ck’.</p></li>
<li><p>iHLRF_add_ck : float
Scalar value that will be added to <code class="docutils literal notranslate"><span class="pre">ck</span></code> value.</p></li>
<li><p>iHLRF_par_a : float
Value presented as <code class="docutils literal notranslate"><span class="pre">a</span></code> in line search equation for iHLRF.</p></li>
<li><p>iHLRF_par_b : float
Value presented as <code class="docutils literal notranslate"><span class="pre">b</span></code> in line search equation for iHLRF,
<code class="docutils literal notranslate"><span class="pre">lambdak</span></code> value is <code class="docutils literal notranslate"><span class="pre">b**nk</span></code>.</p></li>
<li><p>iHLRF_step_lambdk_test : float
Size of <code class="docutils literal notranslate"><span class="pre">lambdak</span></code> test block, after each block convergence is checked.</p></li>
</ul>
</div></blockquote>
<dl class="simple">
<dt>For analyses using ANSYS:</dt><dd><ul class="simple">
<li><p>APDLdebug: bool
If it’s true it will be print the dict with results imported from ANSYS
at each call. Great use for APDL debug.</p></li>
</ul>
</dd>
</dl>
<p>** If an invalid option or value is set the process could stop (or not).**</p>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.Run">
<code class="sig-name descname">Run</code><span class="sig-paren">(</span><em class="sig-param">maxIter=50</em>, <em class="sig-param">tolRel=0.01</em>, <em class="sig-param">tolLS='auto'</em>, <em class="sig-param">dh=0.05</em>, <em class="sig-param">diff='forward'</em>, <em class="sig-param">meth='iHLRF'</em><span class="sig-paren">)</span></dt>
<dd><p>Run the FORM process.</p>
<dl>
<dt>maxIter<span class="classifier">integer, optional</span></dt><dd><p>Maximum of iterations that can be performed. After this the process
will stop with error.
Defaults to 50.</p>
</dd>
<dt>tolRel<span class="classifier">float, optional</span></dt><dd><p>Maximum <strong>relative</strong> error tolerance, for example on search for X point
<code class="docutils literal notranslate"><span class="pre">|X_k</span> <span class="pre">-</span> <span class="pre">X_(k-1)|/|X_(k-1)|&lt;=tolRel</span></code>. Defaults to 0.005.</p>
</dd>
<dt>tolLS<span class="classifier">float, optional</span></dt><dd><p>Maximum <strong>absolute</strong> error tolerance for limit state function,
<code class="docutils literal notranslate"><span class="pre">|G(X)|~=tolLS</span></code>. It should be calibrated based on the magnitude of
limit state function.</p>
<p>It’s possible to automatically determine it using tolLS=’auto’, it will be set
as (tolRel)*(first cycle limit state value).</p>
<p>Defaults to ‘auto’.</p>
</dd>
<dt>dh<span class="classifier">float, optional</span></dt><dd><p>delta_h step when applying derivatives, value applied over means, as
h=mean(x)*dh, so, <code class="docutils literal notranslate"><span class="pre">f'(x)</span> <span class="pre">=</span> <span class="pre">(f(x+mean(x)*dh)-f(x))</span> <span class="pre">/</span> <span class="pre">(mean(x)*dh)</span></code>.
Defaults to 0.05.</p>
</dd>
<dt>diff<span class="classifier">str, optional</span></dt><dd><p>Numeric derivative calcultation method. The possible mehtods are:</p>
<blockquote>
<div><ul class="simple">
<li><p>center: for finite difference method with central difference,</p></li>
</ul>
<p><code class="docutils literal notranslate"><span class="pre">f'(x)</span> <span class="pre">=</span> <span class="pre">(f(x+h)-f(x-h))</span> <span class="pre">/</span> <span class="pre">(2h)</span></code>, it needs <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">+</span> <span class="pre">2*Nvars</span></code>
evaluations of the limit state function.</p>
<ul class="simple">
<li><p>forward: for finite difference method with forward difference,</p></li>
</ul>
<p><code class="docutils literal notranslate"><span class="pre">f'(x)</span> <span class="pre">=</span> <span class="pre">(f(x+h)-f(x))</span> <span class="pre">/</span> <span class="pre">h</span></code>, it needs <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">+</span> <span class="pre">Nvars</span></code>
evaluations of the limit state function.</p>
<ul class="simple">
<li><p>backward: for finite difference method with backward difference,</p></li>
</ul>
<p><code class="docutils literal notranslate"><span class="pre">f'(x)</span> <span class="pre">=</span> <span class="pre">(f(x)-f(x-h))</span> <span class="pre">/</span> <span class="pre">h</span></code>, it needs <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">+</span> <span class="pre">Nvars</span></code>
evaluations of the limit state function.</p>
<p>Defaults to forward.</p>
</div></blockquote>
</dd>
<dt>meth<span class="classifier">str, optional</span></dt><dd><p>FORM method used. Available methods are:</p>
<blockquote>
<div><ul class="simple">
<li><p>HLRF: Hasofer Lind Rackwitz and Fiessler method.</p></li>
<li><p>iHLRF: improved Hasofer Lind Rackwitz and Fiessler method.</p></li>
</ul>
</div></blockquote>
<p>Defaults to iHLRF.</p>
</dd>
</dl>
<p><strong>Returns a dictionary with:</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>status : integer
Status of solution, values can be found after this list.</p></li>
<li><p>Pf : float
Probability of failure.</p></li>
<li><p>Beta : float
Reliability index.</p></li>
<li><p>{DesignPoint} : dictionary of values
Dictionary with the design points for each variable.</p></li>
<li><p>{gradG} : dictionary of values
Dictionary with the final gradient for each variable.</p></li>
<li><p>{alpha} : dictionary of values
Dictionary with the final director cossines for each variable.</p></li>
<li><p>cycles : int
Number of iterations performed to obtain the solution.</p></li>
</ul>
</div></blockquote>
<p><strong>Status values:</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>0: no problem;</p></li>
<li><p>1: warning, maximum of cycles reached with no convergence of CVPf;</p></li>
<li><p>99: undefined error!</p></li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.SetANSYSModel">
<code class="sig-name descname">SetANSYSModel</code><span class="sig-paren">(</span><em class="sig-param">inputname</em>, <em class="sig-param">extrafiles=[]</em>, <em class="sig-param">directory='C:\\Programacao\\_MinhasBibliotecas\\paransys\\docs'</em><span class="sig-paren">)</span></dt>
<dd><p>Set the input script file to be used on ANSYS and extra files that should
be copied together.
All this files must be in the same directory set in parameter directory.</p>
<dl class="simple">
<dt>inputname<span class="classifier">str, obligatory</span></dt><dd><p>Name with extension of the script that will be executed in the analysis.
The script must be done in function of the INPUT variables defined here,
(as parameters of ANSYS), and must define/calculate ANSYS parameters with
the results using the names defined here.</p>
</dd>
<dt>extrafiles<span class="classifier">list of strings, optional</span></dt><dd><p>A list of strings containing extra files (with extension) that are necessary to
run the script analys, could be an MODEL with the MESH already generated,
for example.
An example of extrafiles list is:
<code class="docutils literal notranslate"><span class="pre">extrafiles</span> <span class="pre">=</span> <span class="pre">['temps.txt',</span> <span class="pre">'model1.ans',</span> <span class="pre">'file.db']</span></code></p>
</dd>
<dt>directory<span class="classifier">str, optional</span></dt><dd><p>If the script is not in the current running Python directory you should
place the entire location, if it’s in a subdirectory of current directory
you can use ‘/dirname/filename.ext’.
Defaults to current running Python directory.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.SetANSYSOutVar">
<code class="sig-name descname">SetANSYSOutVar</code><span class="sig-paren">(</span><em class="sig-param">name</em><span class="sig-paren">)</span></dt>
<dd><p>Defines a parameter/variable from ANSYS APDL script as an variable to
return values for Python.</p>
<dl class="simple">
<dt>name<span class="classifier">str, obligatory</span></dt><dd><p>Variable/Parameter name, as defined in APDL script.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.SetANSYSVar">
<code class="sig-name descname">SetANSYSVar</code><span class="sig-paren">(</span><em class="sig-param">name</em><span class="sig-paren">)</span></dt>
<dd><p>Set a variable as ANSYS variable.</p>
<dl class="simple">
<dt>name<span class="classifier">str, obligatory</span></dt><dd><p>Name of variable.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.SetCorrel">
<code class="sig-name descname">SetCorrel</code><span class="sig-paren">(</span><em class="sig-param">var1</em>, <em class="sig-param">var2</em>, <em class="sig-param">correl</em><span class="sig-paren">)</span></dt>
<dd><p>Set the correlation betwen two variables. The values will be transformed
by the Nataf process before running.</p>
<dl class="simple">
<dt>var1<span class="classifier">str, obligatory</span></dt><dd><p>First variable name.</p>
</dd>
<dt>var2<span class="classifier">str, obligatory</span></dt><dd><p>Second variable name.</p>
</dd>
<dt>correl<span class="classifier">float, obligatory</span></dt><dd><p>Correlation betwen var1 and var2.</p>
</dd>
</dl>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.SetLimState">
<code class="sig-name descname">SetLimState</code><span class="sig-paren">(</span><em class="sig-param">equat</em>, <em class="sig-param">userf=None</em><span class="sig-paren">)</span></dt>
<dd><p>Set the limit state equation.</p>
<dl>
<dt>equat<span class="classifier">obligatory</span></dt><dd><p>1) It could be a string with the equation of the limit state. It must be write as a
function of defined variables (In and Out).
2) It could be a Python function created by the user, just passing the function name in 
the place of the string.</p>
</dd>
<dt>userf<span class="classifier">function, optional</span></dt><dd><p>An user defined function that could be used inside the limit state
equation (string), called inside equat as <code class="docutils literal notranslate"><span class="pre">userf()</span></code>.</p>
<p>It’s similar to use a function instead of a string in the equat parameter.</p>
<p>For example, you can create a complex Python function with loops, ifs
and whatever for evaluate the R part of your limit state function
for a concrete beam. An example is showed after.</p>
</dd>
</dl>
<p>First example: if ANSYS returns the maximum load on a truss as variable
FxMAX, and applied loads to be tested are <code class="docutils literal notranslate"><span class="pre">(g+q)*sin(theta)</span></code>, where
<code class="docutils literal notranslate"><span class="pre">g</span></code>, <code class="docutils literal notranslate"><span class="pre">q</span></code>, theta are defined random variables created with <code class="docutils literal notranslate"><span class="pre">CreateVar()</span></code>.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">form</span><span class="o">.</span><span class="n">SetLimState</span><span class="p">(</span><span class="n">equat</span><span class="o">=</span><span class="s1">&#39;FxMAX-(g+q)*sin(theta)&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you can use math expressions as <code class="docutils literal notranslate"><span class="pre">sin()</span></code>, <code class="docutils literal notranslate"><span class="pre">cos()</span></code>, <code class="docutils literal notranslate"><span class="pre">tan()</span></code>, <code class="docutils literal notranslate"><span class="pre">sqrt()</span></code>
from Python math module inside the equation.</p>
<div class="line-block">
<div class="line"><br /></div>
</div>
<p>Second example: you have a steel bar in tension that hasn’t hardening.
It’s stress is a function of <code class="docutils literal notranslate"><span class="pre">(eps,</span> <span class="pre">fy,</span> <span class="pre">E)</span></code>, where <code class="docutils literal notranslate"><span class="pre">eps</span></code> is current
deformation, <code class="docutils literal notranslate"><span class="pre">fy</span></code> is yield stress and <code class="docutils literal notranslate"><span class="pre">E</span></code> the elastic moduli,
you can create inside your code an function like:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">stress</span><span class="p">(</span><span class="n">eps</span><span class="p">,</span> <span class="n">fy</span><span class="p">,</span> <span class="n">E</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">eps</span> <span class="o">&gt;</span> <span class="n">fy</span><span class="o">/</span><span class="n">E</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">fy</span>
        <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">eps</span><span class="o">*</span><span class="n">E</span>
</pre></div>
</div>
<p>And now defining <code class="docutils literal notranslate"><span class="pre">userf=stress</span></code> we can:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">form</span><span class="o">.</span><span class="n">SetLimState</span><span class="p">(</span><span class="n">equat</span><span class="o">=</span><span class="s1">&#39;userf(eps,fy,E)-q&#39;</span><span class="p">,</span> <span class="n">userf</span><span class="o">=</span><span class="n">stress</span><span class="p">)</span>
</pre></div>
</div>
<p>where <code class="docutils literal notranslate"><span class="pre">eps</span></code>, <code class="docutils literal notranslate"><span class="pre">fy</span></code>, <code class="docutils literal notranslate"><span class="pre">E</span></code> and <code class="docutils literal notranslate"><span class="pre">q</span></code> are random variables.
Note that the function inside the limit state equation should be
called as <code class="docutils literal notranslate"><span class="pre">userf()</span></code> with the parameters from <code class="docutils literal notranslate"><span class="pre">stress</span></code>.</p>
<p>Or we can do the same using the functions instead of the string:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">form</span><span class="o">.</span><span class="n">SetLimState</span><span class="p">(</span><span class="n">equat</span><span class="o">=</span><span class="n">stress</span><span class="p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="paransys.FORM.SetStartPoint">
<code class="sig-name descname">SetStartPoint</code><span class="sig-paren">(</span><em class="sig-param">name</em>, <em class="sig-param">value</em><span class="sig-paren">)</span></dt>
<dd><p>Set the point, for each variable, that process will start.
If it’s not declared it will start with the mean value.</p>
<dl class="simple">
<dt>name<span class="classifier">str, obligatory</span></dt><dd><p>Variable name.</p>
</dd>
<dt>value<span class="classifier">float, obligatory</span></dt><dd><p>Starting point for this variable.</p>
</dd>
</dl>
</dd></dl>

</dd></dl>

</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>